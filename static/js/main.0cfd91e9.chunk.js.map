{"version":3,"sources":["components/card/assets/Luke Skywalker.jpg","components/card/assets/C-3PO.jpg","components/card/assets/R2-D2.jpg","components/card/assets/Darth Vader.jpg","components/card/assets/Leia Organa.jpg","components/card/assets/Owen Lars.jpg","components/card/assets/Beru Whitesun lars.jpg","components/card/assets/R5-D4.jpg","components/card/assets/Biggs Darklighter.jpg","components/card/assets/Obi-Wan Kenobi.jpg","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","images","172","Luke","167","C3PO","96","R2D2","202","Darth","150","Leia","178","Owen","165","Beru","97","R5D4","183","Biggs","182","Obi","Card","props","className","monster","name","alt","src","height","mass","CardList","monsters","map","index","key","created","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","results","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iHAAAA,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,gD,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,+C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,oaCavCC,EAAS,CACTC,IAAKC,IACLC,IAAKC,IACLC,GAAIC,IACJC,IAAKC,IACLC,IAAKC,IACLC,IAAKC,IACLC,IAAKC,IACLC,GAAIC,IACJC,IAAKC,IACLC,IAAKC,KAIIC,EAAO,SAACC,GAAD,OAChB,yBAAKC,UAAU,kBACX,gCAAOD,EAAME,QAAQC,KAArB,KACA,yBAAKC,IAAI,UACLC,IAAK3B,EAAOsB,EAAME,QAAQI,UAC9B,uCAAaN,EAAME,QAAQI,QAC3B,qCAAWN,EAAME,QAAQK,QC1BpBC,G,MAAW,SAAAR,GAAK,OACzB,yBAAKC,UAAU,aACdD,EAAMS,SAASC,KAAI,SAACR,EAASS,GAAV,OAChB,kBAAC,EAAD,CAAMC,IAAKV,EAAQW,QAASX,QAASA,EAASS,MAAOA,UCLhDG,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,2BACAf,UAAU,SACVgB,KAAK,SACLF,YAAaA,EACbG,SAAWF,MC0CAG,G,kBA5Cb,aAAe,IAAD,8BACZ,+CAcFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbrC,EAAKC,MAAQ,CACXhB,SAAU,GACVa,YAAa,IALH,E,iFASO,IAAD,OAClBI,MAAM,iCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEZ,SAAUqB,EAAMC,e,+BAOtC,IAAD,EAEyBC,KAAKP,MAA9BhB,EAFA,EAEAA,SAAUa,EAFV,EAEUA,YAIZW,EAAmBxB,EAASyB,QAAO,SAAAhC,GAAO,OAC9CA,EAAQC,KAAKgC,cAAcC,SAASd,EAAYa,kBAGlD,OACM,yBAAKlC,UAAU,OACf,gDACA,kBAAC,EAAD,CACMc,YAAY,kBACZC,aAAegB,KAAKhB,eAEtB,kBAAC,EAAD,CAAUP,SAAUwB,S,GArChBI,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.0cfd91e9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Luke Skywalker.066cc5a8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/C-3PO.ae5458db.jpg\";","module.exports = __webpack_public_path__ + \"static/media/R2-D2.c8068fb5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Darth Vader.237e166f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Leia Organa.303bc390.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Owen Lars.fb238258.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Beru Whitesun lars.1583dc84.jpg\";","module.exports = __webpack_public_path__ + \"static/media/R5-D4.1a48d17f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Biggs Darklighter.1d303942.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Obi-Wan Kenobi.f451e481.jpg\";","import React from 'react';\nimport './card.styles.css';\n//import images from './images' //try using this.props.images in your card constant\nimport Luke from './assets/Luke Skywalker.jpg';\nimport C3PO from './assets/C-3PO.jpg';\nimport R2D2 from './assets/R2-D2.jpg';\nimport Darth from './assets/Darth Vader.jpg';\nimport Leia from './assets/Leia Organa.jpg';\nimport Owen from './assets/Owen Lars.jpg';\nimport Beru from './assets/Beru Whitesun lars.jpg';\nimport R5D4 from './assets/R5-D4.jpg';\nimport Biggs from './assets/Biggs Darklighter.jpg';\nimport Obi from './assets/Obi-Wan Kenobi.jpg';\nlet images = {\n    172: Luke, \n    167: C3PO, \n    96: R2D2, \n    202: Darth, \n    150: Leia, \n    178: Owen, \n    165: Beru, \n    97: R5D4, \n    183: Biggs, \n    182: Obi\n};\n\n\nexport const Card = (props) => (\n    <div className='card-container'>\n        <h3> { props.monster.name } </h3>\n        <img alt='monster' \n            src={images[props.monster.height]} />\n        <p> Height: {props.monster.height}</p> \n        <p> Mass: {props.monster.mass}</p> \n    </div>\n)","import React from 'react';\n\nimport { Card } from '../card/card.component';\nimport './card-list.styles.css';\n\n\n\nexport const CardList = props  => (\n    <div className='card-list'>\n    {props.monsters.map((monster, index) => (\n        <Card key={monster.created} monster={monster} index={index}/>\n        ))}\n    </div>\n);","import React from 'react';\n\nimport './search-box.styles.css';\n\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input \n    className='search'\n    type='search' \n    placeholder={placeholder}\n    onChange= {handleChange}\n    />   \n)","import React, { Component } from 'react';\n\nimport { CardList } from './components/card-list/card-list.component';\n\nimport { SearchBox } from \"./components/search-box/search-box.component\";\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://swapi.dev/api/people/')\n    .then(response => response.json())\n    .then(users => this.setState({ monsters: users.results }));\n  }\n\n  handleChange = e => {\n    this.setState({searchField: e.target.value});\n  }\n\n  render () {\n\n    const { monsters, searchField} = this.state;\n    //equivalent of const monsters = this.state.monsters;\n    // and const searchField = this.state.searchField;\n\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n\n    return (\n          <div className=\"App\">\n          <h1>Starwars Rolodex</h1>   \n          <SearchBox\n                placeholder='search monsters'\n                handleChange= {this.handleChange}\n              />\n              <CardList monsters={filteredMonsters}>\n              \n              </CardList>\n          </div>\n        );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}